package top.yatt.dfargx;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

  public static void generateCppCheckerCode(RegexMatcher matcher, String filename) throws IOException {
    File file = new File("./out/" + filename + ".cpp");

    if (!file.exists()) {
      file.createNewFile();
    }

    PrintWriter pw = new PrintWriter(new FileWriter(file));

    pw.println("// #######################################################################");
    pw.println("// DON'T MODIFY.");
    pw.println("// FILE IS AUTOGENERATED FROM Main.java BASED ON SUPPLIED REGEX.");
    pw.println("// #######################################################################");
    pw.println("#include <iostream>");
    pw.println("#include <string>");
    pw.println();

    pw.println("int main(int argc, char* argv[]) {");
    pw.println("\tint is = " + matcher.getIs() + ";");
    pw.println("\tint rs = " + matcher.getRs() + ";");
    pw.print("\tbool fs[" + matcher.getFs().length + "] = {");
    for (boolean v: matcher.getFs()) {
      pw.print( v + ",") ;
    }
    pw.println("};");

    pw.println("\tint tt[" + matcher.getTransitionTable().length + "][" + matcher.getTransitionTable()[0].length + "] = {");
    for (int[] row: matcher.getTransitionTable()) {
      pw.print("\t\t{");
      for (int e: row) {
        pw.print( e + ",") ;
      }
      pw.println("},");
    }
    pw.println("\t};");

    pw.println("\tstd::string str(argv[1]);");

    // full matcher code
//    pw.println("int s = is;");
//    pw.println("for (int i = 0; i < str.size(); i++) {");
//    pw.println("s = tt[s][(int)(str[i])];");
//
//    pw.println("if (s == rs) {");
//    pw.println("std::cout << \"Failed\" << std::endl;");
//    pw.println("return 0;");
//    pw.println("}");
//
//    pw.println("}");
//
//    pw.println("std::cout << (fs[s] == 1 ? \"Matched\" : \"Failed\") << std::endl;");
//
//    pw.println("return 0;\n");
//    pw.println("}");

    // check all parts of string
    pw.println("\tint start_pos = 0;");

    // start while
    pw.println("\twhile (start_pos < str.size()) {");
    pw.println("\t\tint s = is;");

    // start for
    pw.println("\t\tfor (int i = start_pos; i < str.size(); i++) {");
    pw.println("\t\t\ts = tt[s][(int)(str[i])];");

    // start if
    pw.println("\t\t\tif (s == rs) {");
    pw.println("\t\t\t\tbreak;");
    pw.println("\t\t\t} else if (fs[s]) {");
    pw.println("\t\t\t\tstd::cout << \"Success!\" << std::endl;");
    pw.println("\t\t\t\treturn 0;");
    // end if
    pw.println("\t\t\t}");

    // end for
    pw.println("\t\t}");
    pw.println("\t\tstart_pos++;");

    // end while
    pw.println("\t}");


    pw.println("\tstd::cout << \"Failed\" << std::endl;");
    pw.println("\treturn 0;");
    pw.println("\t}");

    pw.flush();
  }

  public static void main(String[] args) throws IOException {
    Scanner sc = new Scanner(System.in);
    String regex = sc.nextLine();

    RegexMatcher matcher = new RegexMatcher(regex);
    generateCppCheckerCode(matcher, regex);

  }
}
